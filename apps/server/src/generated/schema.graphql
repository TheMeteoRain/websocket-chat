"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Channel`."""
  allChannels(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Channel`."""
    orderBy: [ChannelsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChannelCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChannelFilter
  ): ChannelsConnection

  """Reads and enables pagination through a set of `ChannelMember`."""
  allChannelMembers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChannelMember`."""
    orderBy: [ChannelMembersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChannelMemberCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChannelMemberFilter
  ): ChannelMembersConnection

  """Reads and enables pagination through a set of `KnexMigration`."""
  allKnexMigrations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `KnexMigration`."""
    orderBy: [KnexMigrationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: KnexMigrationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: KnexMigrationFilter
  ): KnexMigrationsConnection

  """Reads and enables pagination through a set of `KnexMigrationsLock`."""
  allKnexMigrationsLocks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `KnexMigrationsLock`."""
    orderBy: [KnexMigrationsLocksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: KnexMigrationsLockCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: KnexMigrationsLockFilter
  ): KnexMigrationsLocksConnection

  """Reads and enables pagination through a set of `Member`."""
  allMembers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MemberCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MemberFilter
  ): MembersConnection

  """Reads and enables pagination through a set of `MemberAccount`."""
  allMemberAccounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MemberAccount`."""
    orderBy: [MemberAccountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MemberAccountCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MemberAccountFilter
  ): MemberAccountsConnection

  """Reads and enables pagination through a set of `Message`."""
  allMessages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection
  channelById(id: UUID!): Channel
  channelMemberByChannelIdAndMemberId(channelId: UUID!, memberId: UUID!): ChannelMember
  knexMigrationById(id: Int!): KnexMigration
  knexMigrationsLockByIndex(index: Int!): KnexMigrationsLock
  memberById(id: UUID!): Member
  memberAccountByMemberId(memberId: UUID!): MemberAccount
  memberAccountByEmail(email: String!): MemberAccount
  messageById(id: UUID!): Message
  currentMember: Member

  """Reads a single `Channel` using its globally unique `ID`."""
  channel(
    """The globally unique `ID` to be used in selecting a single `Channel`."""
    nodeId: ID!
  ): Channel

  """Reads a single `ChannelMember` using its globally unique `ID`."""
  channelMember(
    """
    The globally unique `ID` to be used in selecting a single `ChannelMember`.
    """
    nodeId: ID!
  ): ChannelMember

  """Reads a single `KnexMigration` using its globally unique `ID`."""
  knexMigration(
    """
    The globally unique `ID` to be used in selecting a single `KnexMigration`.
    """
    nodeId: ID!
  ): KnexMigration

  """Reads a single `KnexMigrationsLock` using its globally unique `ID`."""
  knexMigrationsLock(
    """
    The globally unique `ID` to be used in selecting a single `KnexMigrationsLock`.
    """
    nodeId: ID!
  ): KnexMigrationsLock

  """Reads a single `Member` using its globally unique `ID`."""
  member(
    """The globally unique `ID` to be used in selecting a single `Member`."""
    nodeId: ID!
  ): Member

  """Reads a single `MemberAccount` using its globally unique `ID`."""
  memberAccount(
    """
    The globally unique `ID` to be used in selecting a single `MemberAccount`.
    """
    nodeId: ID!
  ): MemberAccount

  """Reads a single `Message` using its globally unique `ID`."""
  message(
    """The globally unique `ID` to be used in selecting a single `Message`."""
    nodeId: ID!
  ): Message
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""A connection to a list of `Channel` values."""
type ChannelsConnection {
  """A list of `Channel` objects."""
  nodes: [Channel]!

  """
  A list of edges which contains the `Channel` and cursor to aid in pagination.
  """
  edges: [ChannelsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Channel` you could get from the connection."""
  totalCount: Int!
}

type Channel implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  createdAt: Datetime
  updatedAt: Datetime

  """Reads and enables pagination through a set of `Message`."""
  messagesByChannelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection!

  """Reads and enables pagination through a set of `ChannelMember`."""
  channelMembersByChannelId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChannelMember`."""
    orderBy: [ChannelMembersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChannelMemberCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChannelMemberFilter
  ): ChannelMembersConnection!
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""A connection to a list of `Message` values."""
type MessagesConnection {
  """A list of `Message` objects."""
  nodes: [Message]!

  """
  A list of edges which contains the `Message` and cursor to aid in pagination.
  """
  edges: [MessagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Message` you could get from the connection."""
  totalCount: Int!
}

type Message implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  memberId: UUID
  channelId: UUID
  text: String!
  createdAt: Datetime
  updatedAt: Datetime

  """Reads a single `Member` that is related to this `Message`."""
  memberByMemberId: Member

  """Reads a single `Channel` that is related to this `Message`."""
  channelByChannelId: Channel
}

type Member implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!
  firstName: String!
  lastName: String!
  createdAt: Datetime
  updatedAt: Datetime

  """Reads a single `MemberAccount` that is related to this `Member`."""
  memberAccountByMemberId: MemberAccount

  """Reads and enables pagination through a set of `MemberAccount`."""
  memberAccountsByMemberId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MemberAccount`."""
    orderBy: [MemberAccountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MemberAccountCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MemberAccountFilter
  ): MemberAccountsConnection! @deprecated(reason: "Please use memberAccountByMemberId instead")

  """Reads and enables pagination through a set of `Message`."""
  messagesByMemberId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection!

  """Reads and enables pagination through a set of `ChannelMember`."""
  channelMembersByMemberId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ChannelMember`."""
    orderBy: [ChannelMembersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChannelMemberCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChannelMemberFilter
  ): ChannelMembersConnection!
}

type MemberAccount implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  memberId: UUID!
  email: String!
  passwordHash: String!

  """Reads a single `Member` that is related to this `MemberAccount`."""
  memberByMemberId: Member
}

"""A connection to a list of `MemberAccount` values."""
type MemberAccountsConnection {
  """A list of `MemberAccount` objects."""
  nodes: [MemberAccount]!

  """
  A list of edges which contains the `MemberAccount` and cursor to aid in pagination.
  """
  edges: [MemberAccountsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MemberAccount` you could get from the connection."""
  totalCount: Int!
}

"""A `MemberAccount` edge in the connection."""
type MemberAccountsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MemberAccount` at the end of the edge."""
  node: MemberAccount
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `MemberAccount`."""
enum MemberAccountsOrderBy {
  NATURAL
  MEMBER_ID_ASC
  MEMBER_ID_DESC
  EMAIL_ASC
  EMAIL_DESC
  PASSWORD_HASH_ASC
  PASSWORD_HASH_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `MemberAccount` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MemberAccountCondition {
  """Checks for equality with the object’s `memberId` field."""
  memberId: UUID

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `passwordHash` field."""
  passwordHash: String
}

"""
A filter to be used against `MemberAccount` object types. All fields are combined with a logical ‘and.’
"""
input MemberAccountFilter {
  """Filter by the object’s `memberId` field."""
  memberId: UUIDFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `passwordHash` field."""
  passwordHash: StringFilter

  """Checks for all expressions in this list."""
  and: [MemberAccountFilter!]

  """Checks for any expressions in this list."""
  or: [MemberAccountFilter!]

  """Negates the expression."""
  not: MemberAccountFilter
}

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Included in the specified list."""
  in: [UUID!]

  """Not included in the specified list."""
  notIn: [UUID!]

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
}

"""Methods to use when ordering `Message`."""
enum MessagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  MEMBER_ID_ASC
  MEMBER_ID_DESC
  CHANNEL_ID_ASC
  CHANNEL_ID_DESC
  TEXT_ASC
  TEXT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Message` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MessageCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `memberId` field."""
  memberId: UUID

  """Checks for equality with the object’s `channelId` field."""
  channelId: UUID

  """Checks for equality with the object’s `text` field."""
  text: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Message` object types. All fields are combined with a logical ‘and.’
"""
input MessageFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `memberId` field."""
  memberId: UUIDFilter

  """Filter by the object’s `channelId` field."""
  channelId: UUIDFilter

  """Filter by the object’s `text` field."""
  text: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [MessageFilter!]

  """Checks for any expressions in this list."""
  or: [MessageFilter!]

  """Negates the expression."""
  not: MessageFilter
}

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

"""A connection to a list of `ChannelMember` values."""
type ChannelMembersConnection {
  """A list of `ChannelMember` objects."""
  nodes: [ChannelMember]!

  """
  A list of edges which contains the `ChannelMember` and cursor to aid in pagination.
  """
  edges: [ChannelMembersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ChannelMember` you could get from the connection."""
  totalCount: Int!
}

type ChannelMember implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  channelId: UUID!
  memberId: UUID!
  joinedAt: Datetime

  """Reads a single `Channel` that is related to this `ChannelMember`."""
  channelByChannelId: Channel

  """Reads a single `Member` that is related to this `ChannelMember`."""
  memberByMemberId: Member
}

"""A `ChannelMember` edge in the connection."""
type ChannelMembersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ChannelMember` at the end of the edge."""
  node: ChannelMember
}

"""Methods to use when ordering `ChannelMember`."""
enum ChannelMembersOrderBy {
  NATURAL
  CHANNEL_ID_ASC
  CHANNEL_ID_DESC
  MEMBER_ID_ASC
  MEMBER_ID_DESC
  JOINED_AT_ASC
  JOINED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ChannelMember` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ChannelMemberCondition {
  """Checks for equality with the object’s `channelId` field."""
  channelId: UUID

  """Checks for equality with the object’s `memberId` field."""
  memberId: UUID

  """Checks for equality with the object’s `joinedAt` field."""
  joinedAt: Datetime
}

"""
A filter to be used against `ChannelMember` object types. All fields are combined with a logical ‘and.’
"""
input ChannelMemberFilter {
  """Filter by the object’s `channelId` field."""
  channelId: UUIDFilter

  """Filter by the object’s `memberId` field."""
  memberId: UUIDFilter

  """Filter by the object’s `joinedAt` field."""
  joinedAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [ChannelMemberFilter!]

  """Checks for any expressions in this list."""
  or: [ChannelMemberFilter!]

  """Negates the expression."""
  not: ChannelMemberFilter
}

"""A `Message` edge in the connection."""
type MessagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Message` at the end of the edge."""
  node: Message
}

"""A `Channel` edge in the connection."""
type ChannelsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Channel` at the end of the edge."""
  node: Channel
}

"""Methods to use when ordering `Channel`."""
enum ChannelsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Channel` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ChannelCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Channel` object types. All fields are combined with a logical ‘and.’
"""
input ChannelFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [ChannelFilter!]

  """Checks for any expressions in this list."""
  or: [ChannelFilter!]

  """Negates the expression."""
  not: ChannelFilter
}

"""A connection to a list of `KnexMigration` values."""
type KnexMigrationsConnection {
  """A list of `KnexMigration` objects."""
  nodes: [KnexMigration]!

  """
  A list of edges which contains the `KnexMigration` and cursor to aid in pagination.
  """
  edges: [KnexMigrationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `KnexMigration` you could get from the connection."""
  totalCount: Int!
}

type KnexMigration implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String
  batch: Int
  migrationTime: Datetime
}

"""A `KnexMigration` edge in the connection."""
type KnexMigrationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `KnexMigration` at the end of the edge."""
  node: KnexMigration
}

"""Methods to use when ordering `KnexMigration`."""
enum KnexMigrationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  BATCH_ASC
  BATCH_DESC
  MIGRATION_TIME_ASC
  MIGRATION_TIME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `KnexMigration` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input KnexMigrationCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `batch` field."""
  batch: Int

  """Checks for equality with the object’s `migrationTime` field."""
  migrationTime: Datetime
}

"""
A filter to be used against `KnexMigration` object types. All fields are combined with a logical ‘and.’
"""
input KnexMigrationFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `batch` field."""
  batch: IntFilter

  """Filter by the object’s `migrationTime` field."""
  migrationTime: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [KnexMigrationFilter!]

  """Checks for any expressions in this list."""
  or: [KnexMigrationFilter!]

  """Negates the expression."""
  not: KnexMigrationFilter
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""A connection to a list of `KnexMigrationsLock` values."""
type KnexMigrationsLocksConnection {
  """A list of `KnexMigrationsLock` objects."""
  nodes: [KnexMigrationsLock]!

  """
  A list of edges which contains the `KnexMigrationsLock` and cursor to aid in pagination.
  """
  edges: [KnexMigrationsLocksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `KnexMigrationsLock` you could get from the connection.
  """
  totalCount: Int!
}

type KnexMigrationsLock implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  index: Int!
  isLocked: Int
}

"""A `KnexMigrationsLock` edge in the connection."""
type KnexMigrationsLocksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `KnexMigrationsLock` at the end of the edge."""
  node: KnexMigrationsLock
}

"""Methods to use when ordering `KnexMigrationsLock`."""
enum KnexMigrationsLocksOrderBy {
  NATURAL
  INDEX_ASC
  INDEX_DESC
  IS_LOCKED_ASC
  IS_LOCKED_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `KnexMigrationsLock` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input KnexMigrationsLockCondition {
  """Checks for equality with the object’s `index` field."""
  index: Int

  """Checks for equality with the object’s `isLocked` field."""
  isLocked: Int
}

"""
A filter to be used against `KnexMigrationsLock` object types. All fields are combined with a logical ‘and.’
"""
input KnexMigrationsLockFilter {
  """Filter by the object’s `index` field."""
  index: IntFilter

  """Filter by the object’s `isLocked` field."""
  isLocked: IntFilter

  """Checks for all expressions in this list."""
  and: [KnexMigrationsLockFilter!]

  """Checks for any expressions in this list."""
  or: [KnexMigrationsLockFilter!]

  """Negates the expression."""
  not: KnexMigrationsLockFilter
}

"""A connection to a list of `Member` values."""
type MembersConnection {
  """A list of `Member` objects."""
  nodes: [Member]!

  """
  A list of edges which contains the `Member` and cursor to aid in pagination.
  """
  edges: [MembersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Member` you could get from the connection."""
  totalCount: Int!
}

"""A `Member` edge in the connection."""
type MembersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Member` at the end of the edge."""
  node: Member
}

"""Methods to use when ordering `Member`."""
enum MembersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Member` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MemberCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Member` object types. All fields are combined with a logical ‘and.’
"""
input MemberFilter {
  """Filter by the object’s `id` field."""
  id: UUIDFilter

  """Filter by the object’s `firstName` field."""
  firstName: StringFilter

  """Filter by the object’s `lastName` field."""
  lastName: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Checks for all expressions in this list."""
  and: [MemberFilter!]

  """Checks for any expressions in this list."""
  or: [MemberFilter!]

  """Negates the expression."""
  not: MemberFilter
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Channel`."""
  createChannel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChannelInput!
  ): CreateChannelPayload

  """Creates a single `ChannelMember`."""
  createChannelMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChannelMemberInput!
  ): CreateChannelMemberPayload

  """Creates a single `KnexMigration`."""
  createKnexMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateKnexMigrationInput!
  ): CreateKnexMigrationPayload

  """Creates a single `KnexMigrationsLock`."""
  createKnexMigrationsLock(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateKnexMigrationsLockInput!
  ): CreateKnexMigrationsLockPayload

  """Creates a single `Member`."""
  createMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMemberInput!
  ): CreateMemberPayload

  """Creates a single `MemberAccount`."""
  createMemberAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMemberAccountInput!
  ): CreateMemberAccountPayload

  """Creates a single `Message`."""
  createMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMessageInput!
  ): CreateMessagePayload

  """Updates a single `Channel` using its globally unique id and a patch."""
  updateChannel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChannelInput!
  ): UpdateChannelPayload

  """Updates a single `Channel` using a unique key and a patch."""
  updateChannelById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChannelByIdInput!
  ): UpdateChannelPayload

  """
  Updates a single `ChannelMember` using its globally unique id and a patch.
  """
  updateChannelMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChannelMemberInput!
  ): UpdateChannelMemberPayload

  """Updates a single `ChannelMember` using a unique key and a patch."""
  updateChannelMemberByChannelIdAndMemberId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateChannelMemberByChannelIdAndMemberIdInput!
  ): UpdateChannelMemberPayload

  """
  Updates a single `KnexMigration` using its globally unique id and a patch.
  """
  updateKnexMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateKnexMigrationInput!
  ): UpdateKnexMigrationPayload

  """Updates a single `KnexMigration` using a unique key and a patch."""
  updateKnexMigrationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateKnexMigrationByIdInput!
  ): UpdateKnexMigrationPayload

  """
  Updates a single `KnexMigrationsLock` using its globally unique id and a patch.
  """
  updateKnexMigrationsLock(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateKnexMigrationsLockInput!
  ): UpdateKnexMigrationsLockPayload

  """Updates a single `KnexMigrationsLock` using a unique key and a patch."""
  updateKnexMigrationsLockByIndex(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateKnexMigrationsLockByIndexInput!
  ): UpdateKnexMigrationsLockPayload

  """Updates a single `Member` using its globally unique id and a patch."""
  updateMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMemberInput!
  ): UpdateMemberPayload

  """Updates a single `Member` using a unique key and a patch."""
  updateMemberById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMemberByIdInput!
  ): UpdateMemberPayload

  """
  Updates a single `MemberAccount` using its globally unique id and a patch.
  """
  updateMemberAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMemberAccountInput!
  ): UpdateMemberAccountPayload

  """Updates a single `MemberAccount` using a unique key and a patch."""
  updateMemberAccountByMemberId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMemberAccountByMemberIdInput!
  ): UpdateMemberAccountPayload

  """Updates a single `MemberAccount` using a unique key and a patch."""
  updateMemberAccountByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMemberAccountByEmailInput!
  ): UpdateMemberAccountPayload

  """Updates a single `Message` using its globally unique id and a patch."""
  updateMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMessageInput!
  ): UpdateMessagePayload

  """Updates a single `Message` using a unique key and a patch."""
  updateMessageById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMessageByIdInput!
  ): UpdateMessagePayload

  """Deletes a single `Channel` using its globally unique id."""
  deleteChannel(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChannelInput!
  ): DeleteChannelPayload

  """Deletes a single `Channel` using a unique key."""
  deleteChannelById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChannelByIdInput!
  ): DeleteChannelPayload

  """Deletes a single `ChannelMember` using its globally unique id."""
  deleteChannelMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChannelMemberInput!
  ): DeleteChannelMemberPayload

  """Deletes a single `ChannelMember` using a unique key."""
  deleteChannelMemberByChannelIdAndMemberId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteChannelMemberByChannelIdAndMemberIdInput!
  ): DeleteChannelMemberPayload

  """Deletes a single `KnexMigration` using its globally unique id."""
  deleteKnexMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteKnexMigrationInput!
  ): DeleteKnexMigrationPayload

  """Deletes a single `KnexMigration` using a unique key."""
  deleteKnexMigrationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteKnexMigrationByIdInput!
  ): DeleteKnexMigrationPayload

  """Deletes a single `KnexMigrationsLock` using its globally unique id."""
  deleteKnexMigrationsLock(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteKnexMigrationsLockInput!
  ): DeleteKnexMigrationsLockPayload

  """Deletes a single `KnexMigrationsLock` using a unique key."""
  deleteKnexMigrationsLockByIndex(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteKnexMigrationsLockByIndexInput!
  ): DeleteKnexMigrationsLockPayload

  """Deletes a single `Member` using its globally unique id."""
  deleteMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMemberInput!
  ): DeleteMemberPayload

  """Deletes a single `Member` using a unique key."""
  deleteMemberById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMemberByIdInput!
  ): DeleteMemberPayload

  """Deletes a single `MemberAccount` using its globally unique id."""
  deleteMemberAccount(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMemberAccountInput!
  ): DeleteMemberAccountPayload

  """Deletes a single `MemberAccount` using a unique key."""
  deleteMemberAccountByMemberId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMemberAccountByMemberIdInput!
  ): DeleteMemberAccountPayload

  """Deletes a single `MemberAccount` using a unique key."""
  deleteMemberAccountByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMemberAccountByEmailInput!
  ): DeleteMemberAccountPayload

  """Deletes a single `Message` using its globally unique id."""
  deleteMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMessageInput!
  ): DeleteMessagePayload

  """Deletes a single `Message` using a unique key."""
  deleteMessageById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMessageByIdInput!
  ): DeleteMessagePayload
  authenticate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: AuthenticateInput!
  ): AuthenticatePayload
  createChannelsForUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateChannelsForUserInput!
  ): CreateChannelsForUserPayload
  registerMember(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RegisterMemberInput!
  ): RegisterMemberPayload
}

"""The output of our create `Channel` mutation."""
type CreateChannelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Channel` that was created by this mutation."""
  channel: Channel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Channel`. May be used by Relay 1."""
  channelEdge(
    """The method to use when ordering `Channel`."""
    orderBy: [ChannelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChannelsEdge
}

"""All input for the create `Channel` mutation."""
input CreateChannelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Channel` to be created by this mutation."""
  channel: ChannelInput!
}

"""An input for mutations affecting `Channel`"""
input ChannelInput {
  id: UUID
  createdAt: Datetime
  updatedAt: Datetime
}

"""The output of our create `ChannelMember` mutation."""
type CreateChannelMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChannelMember` that was created by this mutation."""
  channelMember: ChannelMember

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Channel` that is related to this `ChannelMember`."""
  channelByChannelId: Channel

  """Reads a single `Member` that is related to this `ChannelMember`."""
  memberByMemberId: Member

  """An edge for our `ChannelMember`. May be used by Relay 1."""
  channelMemberEdge(
    """The method to use when ordering `ChannelMember`."""
    orderBy: [ChannelMembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChannelMembersEdge
}

"""All input for the create `ChannelMember` mutation."""
input CreateChannelMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ChannelMember` to be created by this mutation."""
  channelMember: ChannelMemberInput!
}

"""An input for mutations affecting `ChannelMember`"""
input ChannelMemberInput {
  channelId: UUID!
  memberId: UUID!
  joinedAt: Datetime
}

"""The output of our create `KnexMigration` mutation."""
type CreateKnexMigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KnexMigration` that was created by this mutation."""
  knexMigration: KnexMigration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `KnexMigration`. May be used by Relay 1."""
  knexMigrationEdge(
    """The method to use when ordering `KnexMigration`."""
    orderBy: [KnexMigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): KnexMigrationsEdge
}

"""All input for the create `KnexMigration` mutation."""
input CreateKnexMigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `KnexMigration` to be created by this mutation."""
  knexMigration: KnexMigrationInput!
}

"""An input for mutations affecting `KnexMigration`"""
input KnexMigrationInput {
  id: Int
  name: String
  batch: Int
  migrationTime: Datetime
}

"""The output of our create `KnexMigrationsLock` mutation."""
type CreateKnexMigrationsLockPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KnexMigrationsLock` that was created by this mutation."""
  knexMigrationsLock: KnexMigrationsLock

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `KnexMigrationsLock`. May be used by Relay 1."""
  knexMigrationsLockEdge(
    """The method to use when ordering `KnexMigrationsLock`."""
    orderBy: [KnexMigrationsLocksOrderBy!] = [PRIMARY_KEY_ASC]
  ): KnexMigrationsLocksEdge
}

"""All input for the create `KnexMigrationsLock` mutation."""
input CreateKnexMigrationsLockInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `KnexMigrationsLock` to be created by this mutation."""
  knexMigrationsLock: KnexMigrationsLockInput!
}

"""An input for mutations affecting `KnexMigrationsLock`"""
input KnexMigrationsLockInput {
  index: Int
  isLocked: Int
}

"""The output of our create `Member` mutation."""
type CreateMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Member` that was created by this mutation."""
  member: Member

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Member`. May be used by Relay 1."""
  memberEdge(
    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembersEdge
}

"""All input for the create `Member` mutation."""
input CreateMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Member` to be created by this mutation."""
  member: MemberInput!
}

"""An input for mutations affecting `Member`"""
input MemberInput {
  id: UUID
  firstName: String!
  lastName: String!
  createdAt: Datetime
  updatedAt: Datetime
}

"""The output of our create `MemberAccount` mutation."""
type CreateMemberAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MemberAccount` that was created by this mutation."""
  memberAccount: MemberAccount

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Member` that is related to this `MemberAccount`."""
  memberByMemberId: Member

  """An edge for our `MemberAccount`. May be used by Relay 1."""
  memberAccountEdge(
    """The method to use when ordering `MemberAccount`."""
    orderBy: [MemberAccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MemberAccountsEdge
}

"""All input for the create `MemberAccount` mutation."""
input CreateMemberAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MemberAccount` to be created by this mutation."""
  memberAccount: MemberAccountInput!
}

"""An input for mutations affecting `MemberAccount`"""
input MemberAccountInput {
  memberId: UUID!
  email: String!
  passwordHash: String!
}

"""The output of our create `Message` mutation."""
type CreateMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Message` that was created by this mutation."""
  message: Message

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Member` that is related to this `Message`."""
  memberByMemberId: Member

  """Reads a single `Channel` that is related to this `Message`."""
  channelByChannelId: Channel

  """An edge for our `Message`. May be used by Relay 1."""
  messageEdge(
    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessagesEdge
}

"""All input for the create `Message` mutation."""
input CreateMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Message` to be created by this mutation."""
  message: MessageInput!
}

"""An input for mutations affecting `Message`"""
input MessageInput {
  id: UUID
  memberId: UUID
  channelId: UUID
  text: String!
  createdAt: Datetime
  updatedAt: Datetime
}

"""The output of our update `Channel` mutation."""
type UpdateChannelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Channel` that was updated by this mutation."""
  channel: Channel

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Channel`. May be used by Relay 1."""
  channelEdge(
    """The method to use when ordering `Channel`."""
    orderBy: [ChannelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChannelsEdge
}

"""All input for the `updateChannel` mutation."""
input UpdateChannelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Channel` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Channel` being updated.
  """
  channelPatch: ChannelPatch!
}

"""
Represents an update to a `Channel`. Fields that are set will be updated.
"""
input ChannelPatch {
  id: UUID
  createdAt: Datetime
  updatedAt: Datetime
}

"""All input for the `updateChannelById` mutation."""
input UpdateChannelByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Channel` being updated.
  """
  channelPatch: ChannelPatch!
  id: UUID!
}

"""The output of our update `ChannelMember` mutation."""
type UpdateChannelMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChannelMember` that was updated by this mutation."""
  channelMember: ChannelMember

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Channel` that is related to this `ChannelMember`."""
  channelByChannelId: Channel

  """Reads a single `Member` that is related to this `ChannelMember`."""
  memberByMemberId: Member

  """An edge for our `ChannelMember`. May be used by Relay 1."""
  channelMemberEdge(
    """The method to use when ordering `ChannelMember`."""
    orderBy: [ChannelMembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChannelMembersEdge
}

"""All input for the `updateChannelMember` mutation."""
input UpdateChannelMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChannelMember` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ChannelMember` being updated.
  """
  channelMemberPatch: ChannelMemberPatch!
}

"""
Represents an update to a `ChannelMember`. Fields that are set will be updated.
"""
input ChannelMemberPatch {
  channelId: UUID
  memberId: UUID
  joinedAt: Datetime
}

"""
All input for the `updateChannelMemberByChannelIdAndMemberId` mutation.
"""
input UpdateChannelMemberByChannelIdAndMemberIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ChannelMember` being updated.
  """
  channelMemberPatch: ChannelMemberPatch!
  channelId: UUID!
  memberId: UUID!
}

"""The output of our update `KnexMigration` mutation."""
type UpdateKnexMigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KnexMigration` that was updated by this mutation."""
  knexMigration: KnexMigration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `KnexMigration`. May be used by Relay 1."""
  knexMigrationEdge(
    """The method to use when ordering `KnexMigration`."""
    orderBy: [KnexMigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): KnexMigrationsEdge
}

"""All input for the `updateKnexMigration` mutation."""
input UpdateKnexMigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `KnexMigration` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `KnexMigration` being updated.
  """
  knexMigrationPatch: KnexMigrationPatch!
}

"""
Represents an update to a `KnexMigration`. Fields that are set will be updated.
"""
input KnexMigrationPatch {
  id: Int
  name: String
  batch: Int
  migrationTime: Datetime
}

"""All input for the `updateKnexMigrationById` mutation."""
input UpdateKnexMigrationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `KnexMigration` being updated.
  """
  knexMigrationPatch: KnexMigrationPatch!
  id: Int!
}

"""The output of our update `KnexMigrationsLock` mutation."""
type UpdateKnexMigrationsLockPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KnexMigrationsLock` that was updated by this mutation."""
  knexMigrationsLock: KnexMigrationsLock

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `KnexMigrationsLock`. May be used by Relay 1."""
  knexMigrationsLockEdge(
    """The method to use when ordering `KnexMigrationsLock`."""
    orderBy: [KnexMigrationsLocksOrderBy!] = [PRIMARY_KEY_ASC]
  ): KnexMigrationsLocksEdge
}

"""All input for the `updateKnexMigrationsLock` mutation."""
input UpdateKnexMigrationsLockInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `KnexMigrationsLock` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `KnexMigrationsLock` being updated.
  """
  knexMigrationsLockPatch: KnexMigrationsLockPatch!
}

"""
Represents an update to a `KnexMigrationsLock`. Fields that are set will be updated.
"""
input KnexMigrationsLockPatch {
  index: Int
  isLocked: Int
}

"""All input for the `updateKnexMigrationsLockByIndex` mutation."""
input UpdateKnexMigrationsLockByIndexInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `KnexMigrationsLock` being updated.
  """
  knexMigrationsLockPatch: KnexMigrationsLockPatch!
  index: Int!
}

"""The output of our update `Member` mutation."""
type UpdateMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Member` that was updated by this mutation."""
  member: Member

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Member`. May be used by Relay 1."""
  memberEdge(
    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembersEdge
}

"""All input for the `updateMember` mutation."""
input UpdateMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Member` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Member` being updated.
  """
  memberPatch: MemberPatch!
}

"""
Represents an update to a `Member`. Fields that are set will be updated.
"""
input MemberPatch {
  id: UUID
  firstName: String
  lastName: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""All input for the `updateMemberById` mutation."""
input UpdateMemberByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Member` being updated.
  """
  memberPatch: MemberPatch!
  id: UUID!
}

"""The output of our update `MemberAccount` mutation."""
type UpdateMemberAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MemberAccount` that was updated by this mutation."""
  memberAccount: MemberAccount

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Member` that is related to this `MemberAccount`."""
  memberByMemberId: Member

  """An edge for our `MemberAccount`. May be used by Relay 1."""
  memberAccountEdge(
    """The method to use when ordering `MemberAccount`."""
    orderBy: [MemberAccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MemberAccountsEdge
}

"""All input for the `updateMemberAccount` mutation."""
input UpdateMemberAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MemberAccount` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MemberAccount` being updated.
  """
  memberAccountPatch: MemberAccountPatch!
}

"""
Represents an update to a `MemberAccount`. Fields that are set will be updated.
"""
input MemberAccountPatch {
  memberId: UUID
  email: String
  passwordHash: String
}

"""All input for the `updateMemberAccountByMemberId` mutation."""
input UpdateMemberAccountByMemberIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MemberAccount` being updated.
  """
  memberAccountPatch: MemberAccountPatch!
  memberId: UUID!
}

"""All input for the `updateMemberAccountByEmail` mutation."""
input UpdateMemberAccountByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MemberAccount` being updated.
  """
  memberAccountPatch: MemberAccountPatch!
  email: String!
}

"""The output of our update `Message` mutation."""
type UpdateMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Message` that was updated by this mutation."""
  message: Message

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Member` that is related to this `Message`."""
  memberByMemberId: Member

  """Reads a single `Channel` that is related to this `Message`."""
  channelByChannelId: Channel

  """An edge for our `Message`. May be used by Relay 1."""
  messageEdge(
    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessagesEdge
}

"""All input for the `updateMessage` mutation."""
input UpdateMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Message` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Message` being updated.
  """
  messagePatch: MessagePatch!
}

"""
Represents an update to a `Message`. Fields that are set will be updated.
"""
input MessagePatch {
  id: UUID
  memberId: UUID
  channelId: UUID
  text: String
  createdAt: Datetime
  updatedAt: Datetime
}

"""All input for the `updateMessageById` mutation."""
input UpdateMessageByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Message` being updated.
  """
  messagePatch: MessagePatch!
  id: UUID!
}

"""The output of our delete `Channel` mutation."""
type DeleteChannelPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Channel` that was deleted by this mutation."""
  channel: Channel
  deletedChannelId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Channel`. May be used by Relay 1."""
  channelEdge(
    """The method to use when ordering `Channel`."""
    orderBy: [ChannelsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChannelsEdge
}

"""All input for the `deleteChannel` mutation."""
input DeleteChannelInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Channel` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteChannelById` mutation."""
input DeleteChannelByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `ChannelMember` mutation."""
type DeleteChannelMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ChannelMember` that was deleted by this mutation."""
  channelMember: ChannelMember
  deletedChannelMemberId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Channel` that is related to this `ChannelMember`."""
  channelByChannelId: Channel

  """Reads a single `Member` that is related to this `ChannelMember`."""
  memberByMemberId: Member

  """An edge for our `ChannelMember`. May be used by Relay 1."""
  channelMemberEdge(
    """The method to use when ordering `ChannelMember`."""
    orderBy: [ChannelMembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChannelMembersEdge
}

"""All input for the `deleteChannelMember` mutation."""
input DeleteChannelMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ChannelMember` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteChannelMemberByChannelIdAndMemberId` mutation.
"""
input DeleteChannelMemberByChannelIdAndMemberIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  channelId: UUID!
  memberId: UUID!
}

"""The output of our delete `KnexMigration` mutation."""
type DeleteKnexMigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KnexMigration` that was deleted by this mutation."""
  knexMigration: KnexMigration
  deletedKnexMigrationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `KnexMigration`. May be used by Relay 1."""
  knexMigrationEdge(
    """The method to use when ordering `KnexMigration`."""
    orderBy: [KnexMigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): KnexMigrationsEdge
}

"""All input for the `deleteKnexMigration` mutation."""
input DeleteKnexMigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `KnexMigration` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteKnexMigrationById` mutation."""
input DeleteKnexMigrationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `KnexMigrationsLock` mutation."""
type DeleteKnexMigrationsLockPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KnexMigrationsLock` that was deleted by this mutation."""
  knexMigrationsLock: KnexMigrationsLock
  deletedKnexMigrationsLockId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `KnexMigrationsLock`. May be used by Relay 1."""
  knexMigrationsLockEdge(
    """The method to use when ordering `KnexMigrationsLock`."""
    orderBy: [KnexMigrationsLocksOrderBy!] = [PRIMARY_KEY_ASC]
  ): KnexMigrationsLocksEdge
}

"""All input for the `deleteKnexMigrationsLock` mutation."""
input DeleteKnexMigrationsLockInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `KnexMigrationsLock` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteKnexMigrationsLockByIndex` mutation."""
input DeleteKnexMigrationsLockByIndexInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  index: Int!
}

"""The output of our delete `Member` mutation."""
type DeleteMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Member` that was deleted by this mutation."""
  member: Member
  deletedMemberId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Member`. May be used by Relay 1."""
  memberEdge(
    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembersEdge
}

"""All input for the `deleteMember` mutation."""
input DeleteMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Member` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMemberById` mutation."""
input DeleteMemberByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our delete `MemberAccount` mutation."""
type DeleteMemberAccountPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MemberAccount` that was deleted by this mutation."""
  memberAccount: MemberAccount
  deletedMemberAccountId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Member` that is related to this `MemberAccount`."""
  memberByMemberId: Member

  """An edge for our `MemberAccount`. May be used by Relay 1."""
  memberAccountEdge(
    """The method to use when ordering `MemberAccount`."""
    orderBy: [MemberAccountsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MemberAccountsEdge
}

"""All input for the `deleteMemberAccount` mutation."""
input DeleteMemberAccountInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MemberAccount` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMemberAccountByMemberId` mutation."""
input DeleteMemberAccountByMemberIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  memberId: UUID!
}

"""All input for the `deleteMemberAccountByEmail` mutation."""
input DeleteMemberAccountByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""The output of our delete `Message` mutation."""
type DeleteMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Message` that was deleted by this mutation."""
  message: Message
  deletedMessageId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Member` that is related to this `Message`."""
  memberByMemberId: Member

  """Reads a single `Channel` that is related to this `Message`."""
  channelByChannelId: Channel

  """An edge for our `Message`. May be used by Relay 1."""
  messageEdge(
    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MessagesEdge
}

"""All input for the `deleteMessage` mutation."""
input DeleteMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Message` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMessageById` mutation."""
input DeleteMessageByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""The output of our `authenticate` mutation."""
type AuthenticatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  jwtToken: JwtToken

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
A JSON Web Token defined by [RFC 7519](https://tools.ietf.org/html/rfc7519)
which securely represents claims between two parties.
"""
scalar JwtToken

"""All input for the `authenticate` mutation."""
input AuthenticateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
  password: String!
}

"""The output of our `createChannelsForUser` mutation."""
type CreateChannelsForUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  channels: [Channel]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createChannelsForUser` mutation."""
input CreateChannelsForUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  memberId: UUID
}

"""The output of our `registerMember` mutation."""
type RegisterMemberPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  member: Member

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Member`. May be used by Relay 1."""
  memberEdge(
    """The method to use when ordering `Member`."""
    orderBy: [MembersOrderBy!] = [PRIMARY_KEY_ASC]
  ): MembersEdge
}

"""All input for the `registerMember` mutation."""
input RegisterMemberInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

"""
The root subscription type: contains realtime events you can subscribe to with the `subscription` operation.
"""
type Subscription {
  """
  Triggered when the current user's data changes:
  
  - direct modifications to the user
  - when their organization membership changes
  """
  newChannel: ChannelSubscriptionPayload
  newMessages: MessageSubscriptionPayload2
  newMessage(input: MessageSubscriptionInput!): MessageSubscriptionPayload
  listen(topic: String!): ListenPayload!
}

type ChannelSubscriptionPayload {
  channel: Channel
  event: String
}

type MessageSubscriptionPayload2 {
  message: Message
  event: String
}

type MessageSubscriptionPayload {
  message: Message
  event: String
}

input MessageSubscriptionInput {
  channelId: UUID!
}

type ListenPayload {
  """
  Our root query field type. Allows us to run any query from our subscription payload.
  """
  query: Query
  relatedNode: Node
  relatedNodeId: ID
}
